void () T_MissileTouch;
void () info_player_start;
void (entity targ, entity attacker) ClientObituary;
void () ResetPlayers;

void (entity Goal, entity AP, float addb) DoResults;
float (entity Goal, entity AP) Activated;
float (entity targ, entity attacker, float damage) TeamEqualiseDamage;
float () CountRemainingTeams;

void () monster_death_use = {
    if (self.flags & FL_FLY)
        self.flags = self.flags - FL_FLY;

    if (self.flags & FL_SWIM)
        self.flags = self.flags - FL_SWIM;

    if (!self.target)
        return;

    activator = self.enemy;
    SUB_UseTargets();
};

float (entity targ, entity inflictor) CanDamage = {
    if (targ.movetype == MOVETYPE_PUSH) {

        traceline(inflictor.origin, 0.5 * (targ.absmin + targ.absmax),
                  TRUE, self);
        if (trace_fraction == 1)
            return (TRUE);
        if (trace_ent == targ)
            return (TRUE);
        return (FALSE);
    }

    traceline(inflictor.origin, targ.origin, TRUE, self);
    if (trace_fraction == 1)
        return (TRUE);
    traceline(inflictor.origin, targ.origin + '15 15 0', TRUE, self);
    if (trace_fraction == 1)
        return (TRUE);
    traceline(inflictor.origin, targ.origin + '-15 -15 0', TRUE, self);
    if (trace_fraction == 1)
        return (TRUE);
    traceline(inflictor.origin, targ.origin + '-15 15 0', TRUE, self);
    if (trace_fraction == 1)
        return (TRUE);
    traceline(inflictor.origin, targ.origin + '15 -15 0', 1, self);
    if (trace_fraction == 1)
        return (TRUE);
    return (FALSE);
};

void () ResetPlayersDelayed = {
    if(duel_reset_timer < 1 && duel_reset_timer > 0) {
        self.nextthink = time + duel_reset_timer;
        duel_reset_timer = 0;
    } else if(duel_reset_timer <= 0) {
        ResetPlayers();
        dremove(self);
    } else {
        bprint(PRINT_HIGH, Q"\sReset in \x10", ftos(duel_reset_timer), "\x11\s\n");
        sound(self, CHAN_AUTO, "buttons/switch04.wav", 1, ATTN_NONE);
        //stuffcmd (p, "play buttons/switch04.wav\n");
        duel_reset_timer--;
        self.nextthink = time + 1;
    }
};

void () ResetPlayersWithCountdown = {
    local entity reset_timer;
    local float remainder;
    no_fire_mode = 1;
    if(duel_reset_delay) {
        reset_timer = find(world, classname, "duel_reset_timer");
        if(!reset_timer) {
            remainder = duel_reset_delay % 1;
            duel_reset_timer = duel_reset_delay - remainder;
            reset_timer = spawn();
            reset_timer.classname = "duel_reset_timer";
            reset_timer.nextthink = time + remainder;
            reset_timer.think = ResetPlayersDelayed;
        }
    } else {
        ResetPlayers();
    }

}

void (entity targ, entity attacker) Killed = {
    local entity oself;

    if (attacker == world && (targ.classname == "building_dispenser" || targ.classname == "building_sentrygun"))
        attacker = targ;

    oself = self;
    self = targ;
    if (self.health < -99)
        self.health = -99;

    if ((self.movetype == MOVETYPE_PUSH) ||
        //make sure unmovable players like those feigning/building are still given an obituary
        //(self.movetype == MOVETYPE_NONE && !self.is_building && !self.is_detpacking && !self.is_feigning)) {
        (self.movetype == MOVETYPE_NONE && self.classname != "player")) {

        self.th_die();
        self = oself;
        return;
    }

    self.enemy = attacker;

    if (self.flags & FL_MONSTER) {

        killed_monsters = killed_monsters + 1;
        WriteByte(MSG_ALL, SVC_KILLEDMONSTER);
    }

    ClientObituary(self, attacker);
    self.takedamage = DAMAGE_NO;
    self.touch = SUB_Null;

    monster_death_use();
    self.th_die();
    self = oself;
    if(duelmode && targ.classname == "player" && !cb_prematch) {
        //Already in no fire mode - implies you're not the first to die
        if(no_fire_mode) {
            if(CountRemainingTeams() == 0) {
                ResetPlayers();
            }
        } else {
            if(CountRemainingTeams() < 2) {
                ResetPlayersWithCountdown();
            }
        }
    }
};

float IsCritHit(float weapon, float damage)
{
    float isCrit = 0;

    switch (weapon)
    {
        case DMSG_ROCKETL:
            if (damage >= 80)
                isCrit = 1;
            break;
        case DMSG_SSHOTGUN:
            if (damage >= 40)
                isCrit = 1;
            break;
        case DMSG_GRENADEL:
            if (damage >= 85)
                isCrit = 1;
            break;
        case DMSG_INCENDIARY:
            if (damage >= 40)
                isCrit = 1;
            break;

    }

    return isCrit;
}

void (entity targ, entity inflictor, entity attacker, float damage) HitSound = {

	if ((attacker.classname == "player") || (attacker.classname == "building_sentrygun") || (attacker.classname == "building_dispenser"))
    {
        if ((targ.classname == "player") || (targ.classname == "building_sentrygun") || (targ.classname == "building_dispenser"))
        {
            local entity trueattacker;
                        
            if (attacker.classname == "building_sentrygun")
            {	// work out correct attacker
                trueattacker = attacker.real_owner;
            }
            else 
            {
                trueattacker = attacker;
            }
            
            if (trueattacker == targ)
            {
                return;
            }

            local string hitsound;
            hitsound = infokey(trueattacker, "hitsound");
            
            if (hitsound == "1" || hitsound == "2")
            {
                float crit = IsCritHit(inflictor.weapon, damage);
                
                local float sameteam;
                sameteam = 0;

                if (targ.playerclass == PC_SPY)
                {
                    if (targ.is_feigning)
                    {
                        return;
                    }
                    if (targ.undercover_team == attacker.team_no)
                    {
                        sameteam = 1;
                    }
                } 
                else if (attacker.team_no == targ.team_no)
                {
                    sameteam = 1;
                }
                
                if (sameteam == 0) {
                    if (crit == 1){
                        stuffcmd(trueattacker, "play misc/hitsoundcrit.wav\n");		//sounds precached in weapons.qc
                    }
                    else { 
                        stuffcmd(trueattacker, "play misc/hitsound.wav\n");		//sounds precached in weapons.qc
                    }
                }
                else {
                    if (hitsound == "2"){
                        stuffcmd(trueattacker, "play misc/hitsoundteam.wav\n");		//sounds precached in weapons.qc
                    }
                }	
            }
		}
	}
};

void (entity targ, entity inflictor, entity attacker,
      float damage) T_Damage = {
    local vector dir;
    local entity oldself, te;
    local float save;
    local float take;

    if (!targ.takedamage)
        return;

    if (attacker.classname == "player")
        damage = damage * 0.9;

    if (attacker.classname == "player") {

        if (attacker.super_damage_finished > time)
            damage = damage * 4;

        if ((targ.classname != "player") && (targ.classname != "bot")) {

            if (!Activated(targ, attacker)) {

                if (targ.else_goal != 0) {

                    te = Findgoal(targ.else_goal);
                    if (te)
                        AttemptToActivate(te, attacker, targ);
                }
                return;
            }
        }
    }
    damage_attacker = attacker;
    if (teamplay & (TEAMPLAY_LESSSCOREHELP | TEAMPLAY_LESSPLAYERSHELP))
        damage = TeamEqualiseDamage(targ, attacker, damage);

    save = ceil(targ.armortype * damage);
    if (save >= targ.armorvalue) {

        save = targ.armorvalue;
        targ.armortype = 0;
        targ.armorclass = 0;
        targ.items =
            targ.items -
            (targ.items & (IT_ARMOR1 | IT_ARMOR2 | IT_ARMOR3));
    }
    targ.armorvalue = targ.armorvalue - save;
    take = ceil(damage - save);

    if (targ.flags & FL_CLIENT) {
        targ.dmg_take = targ.dmg_take + take;
        targ.dmg_save = targ.dmg_save + save;
        targ.dmg_inflictor = inflictor;
    }
    if ((inflictor != world) && (targ.movetype == MOVETYPE_WALK)) {

        targ.immune_to_check = time + (damage / 20);
        dir = targ.origin - ((inflictor.absmin + inflictor.absmax) * 0.5);
        dir = normalize(dir);
        if (((damage < 60) &&
             ((attacker.classname == "player") &&
              (targ.classname == "player")))
            && (attacker.netname != targ.netname))
            targ.velocity = targ.velocity + dir * damage * 11;
        else
            targ.velocity = targ.velocity + dir * damage * 8;

        if (((rj > 1) &&
             ((attacker.classname == "player") &&
              (targ.classname == "player")))
            && (attacker.netname == targ.netname))
            targ.velocity = (targ.velocity + ((dir * damage) * rj));
    }
    if (targ.flags & FL_GODMODE)
        return;

    if (targ.invincible_finished >= time) {
        if (self.invincible_sound < time) {

            sound(targ, CHAN_ITEM, "items/protect3.wav", 1, ATTN_NORM);
            self.invincible_sound = time + 2;
        }
        return;
    }
    if ((attacker.classname == "player")
        && ((targ.classname == "player") ||
            (targ.classname == "building_sentrygun"))) {

        if (((targ.team_no > 0) && (targ.team_no == attacker.team_no)) &&
            (targ != attacker)) {

            if (teamplay & TEAMPLAY_NOEXPLOSIVE)
                return;
            else if (teamplay & TEAMPLAY_HALFEXPLOSIVE)
                take = take / 2;
        }
    }
    if ((take < 1) && (take != 0))
        take = 1;

    targ.health = targ.health - take;
    
    StatTracker.Damage(targ, inflictor, attacker, damage);

    if (targ.armorvalue < 1) {
        targ.armorclass = 0;
        targ.armorvalue = 0;
    }
    if (targ.health <= 0) {
        Killed(targ, attacker);
        return;
    }

    oldself = self;
    self = targ;

    if (self.th_pain) {
        self.th_pain(attacker, take);
        if (skill >= 3)
            self.pain_finished = time + 5;
    }
    self = oldself;
};

// TODO laser grens
string WeaponToString(float weapon, float isGren)
{
    string msg = "";
    if (isGren)
    {
        switch (weapon)
        {
            case GR_TYPE_NORMAL:
            msg = "GR_TYPE_NORMAL";
            break;
            case GR_TYPE_CONCUSSION:
                msg = "GR_TYPE_CONCUSSION";
                break;
            case GR_TYPE_NAIL:
                msg = "GR_TYPE_NAIL";
                // laser gren???
                break;
            case GR_TYPE_MIRV:
                msg = "GR_TYPE_MIRV";
                break;
            case GR_TYPE_NAPALM:
                msg = "GR_TYPE_NAPALM";
                break;
            case GR_TYPE_FLARE:
                msg = "GR_TYPE_FLARE";
                break;
            case GR_TYPE_GAS:
                msg = "GR_TYPE_GAS";
                break;
            case GR_TYPE_EMP:
                msg = "GR_TYPE_EMP";
                break;
            case GR_TYPE_FLASH:
                msg = "GR_TYPE_FLASH";
                break;
            case GR_TYPE_CALTROP:
                msg = "GR_TYPE_CALTROP";
                break;
            default:
            msg = strcat("NOT FOUND: ", ftos(weapon));
        }
    }
    else
    {
        switch (weapon)
        {
            case WEAP_AXE:
                msg = "WEAP_AXE";
                break;
            case WEAP_SPANNER:
                msg = "WEAP_SPANNER";
                break;
            case WEAP_SHOTGUN:
                msg = "WEAP_SHOTGUN";
                break;
            case WEAP_SUPER_SHOTGUN:
                msg = "WEAP_SUPER_SHOTGUN";
                break;
            case WEAP_NAILGUN:
                msg = "WEAP_NAILGUN";
                break;
            case WEAP_SUPER_NAILGUN:
                msg = "WEAP_SUPER_NAILGUN";
                break;
            case WEAP_GRENADE_LAUNCHER:
                msg = "WEAP_GRENADE_LAUNCHER";
                break;
            case WEAP_ROCKET_LAUNCHER:
                msg = "WEAP_ROCKET_LAUNCHER";
                break;
            case WEAP_LIGHTNING:
                msg = "WEAP_LIGHTNING";
                break;
            case WEAP_SNIPER_RIFLE:
                msg = "WEAP_SNIPER_RIFLE";
                break;
            case WEAP_AUTO_RIFLE:
                msg = "WEAP_AUTO_RIFLE";
                break;
            case WEAP_ASSAULT_CANNON:
                msg = "WEAP_ASSAULT_CANNON";
                break;
            case WEAP_FLAMETHROWER:
                msg = "WEAP_FLAMETHROWER";
                break;
            case WEAP_INCENDIARY:
                msg = "WEAP_INCENDIARY";
                break;
            case WEAP_MEDIKIT:
                msg = "WEAP_MEDIKIT";
                break;
            case WEAP_TRANQ:
                msg = "WEAP_TRANQ";
                break;
            case WEAP_LASER:
                msg = "WEAP_LASER";
                break;
            case WEAP_HOOK:
                msg = "WEAP_HOOK";
                break;
            case WEAP_DETPACK:
                msg = "WEAP_DETPACK";
                break;
            default:
                msg = strcat("NOT FOUND: ", ftos(weapon));
        }
    }
    
    return msg;
}

string DMSGToString(float dmsg)
{
    string msg = "";
    switch (dmsg)
    {
        case DMSG_SHOTGUN:
            msg = "DMSG_SHOTGUN";
            break;
        case DMSG_SSHOTGUN:
            msg = "DMSG_SSHOTGUN";
            break;
        case DMSG_NAILGUN:
            msg = "DMSG_NAILGUN";
            break;
        case DMSG_SNAILGUN:
            msg = "DMSG_SNAILGUN";
            break;
        case DMSG_GRENADEL:
            msg = "DMSG_GRENADEL";
            break;
        case DMSG_ROCKETL:
            msg = "DMSG_ROCKETL";
            break;
        case DMSG_LIGHTNING:
            msg = "DMSG_LIGHTNING";
            break;
        case DMSG_GREN_HAND:
            msg = "DMSG_GREN_HAND";
            break;
        case DMSG_GREN_NAIL:
            msg = "DMSG_GREN_NAIL";
            break;
        case DMSG_GREN_MIRV:
            msg = "DMSG_GREN_MIRV";
            break;
        case DMSG_GREN_PIPE:
            msg = "DMSG_GREN_PIPE";
            break;
        case DMSG_DETPACK:
            msg = "DMSG_DETPACK";
            break;
        case DMSG_BIOWEAPON:
            msg = "DMSG_BIOWEAPON";
            break;
        case DMSG_BIOWEAPON_ATT:
            msg = "DMSG_BIOWEAPON_ATT";
            break;
        case DMSG_FLAME:
            msg = "DMSG_FLAME";
            break;
        case DMSG_DETPACK_DIS:
            msg = "DMSG_DETPACK_DIS";
            break;
        case DMSG_AXE:
            msg = "DMSG_AXE";
            break;
        case DMSG_SNIPERRIFLE:
            msg = "DMSG_SNIPERRIFLE";
            break;
        case DMSG_AUTORIFLE:
            msg = "DMSG_AUTORIFLE";
            break;
        case DMSG_ASSAULTCANNON:
            msg = "DMSG_ASSAULTCANNON";
            break;
        case DMSG_HOOK:
            msg = "DMSG_HOOK";
            break;
        case DMSG_BACKSTAB:
            msg = "DMSG_BACKSTAB";
            break;
        case DMSG_MEDIKIT:
            msg = "DMSG_MEDIKIT";
            break;
        case DMSG_GREN_GAS:
            msg = "DMSG_GREN_GAS";
            break;
        case DMSG_TRANQ:
            msg = "DMSG_TRANQ";
            break;
        case DMSG_LASERBOLT:
            msg = "DMSG_LASERBOLT";
            break;
        case DMSG_SENTRYGUN_BULLET:
            msg = "DMSG_SENTRYGUN_BULLET";
            break;
        case DMSG_SNIPERLEGSHOT:
            msg = "DMSG_SNIPERLEGSHOT";
            break;
        case DMSG_SNIPERHEADSHOT:
            msg = "DMSG_SNIPERHEADSHOT";
            break;
        case DMSG_GREN_EMP:
            msg = "DMSG_GREN_EMP";
            break;
        case DMSG_GREN_EMP_AMMO:
            msg = "DMSG_GREN_EMP_AMMO";
            break;
        case DMSG_SPANNER:
            msg = "DMSG_SPANNER";
            break;
        case DMSG_INCENDIARY:
            msg = "DMSG_INCENDIARY";
            break;
        case DMSG_SENTRYGUN_ROCKET:
            msg = "DMSG_SENTRYGUN_ROCKET";
            break;
        case DMSG_GREN_FLASH:
            msg = "DMSG_GREN_FLASH";
            break;
        case DMSG_TRIGGER:
            msg = "DMSG_TRIGGER";
            break;
        case DMSG_TEAMKILL:
            msg = "DMSG_TEAMKILL";
            break;
        case DMSG_SENTRYGUN_EXPLODE:
            msg = "DMSG_SENTRYGUN_EXPLODE";
            break;
        case DMSG_DISPENSER_EXPLODE:
            msg = "DMSG_DISPENSER_EXPLODE";
            break;
        case DMSG_GREN_PIPE_AIR:
            msg = "DMSG_GREN_PIPE_AIR";
            break;
        case DMSG_GREN_CALTROP:
            msg = "DMSG_GREN_CALTROP";
            break;
        default:
            msg = strcat("NOT FOUND: ", ftos(dmsg));
    }
    return msg;
}

void (entity targ, entity inflictor, entity attacker, float damage,
      float T_flags, float T_AttackType) TF_T_Damage = {
    local vector dir;
    local entity oldself;
    local entity te;
    local float save;
    local float take;
    local float olddmsg;
    local float no_damage;
    local float moment;

    if (targ.takedamage == 0)
        return;

    if (T_AttackType & 256) {
        targ.health = damage;
        return;
    }
    if (cease_fire)
        return;

    no_damage = 0;

    if (attacker.classname == "player") {

        damage = damage * 0.9;

        if (attacker.super_damage_finished > time)
            damage = damage * 4;

        if ((targ.classname != "player")
            && (targ.classname != "bot")
            && (targ.classname != "building_sentrygun")
            && (targ.classname != "building_dispenser")
            && (targ.classname != "building_teleporter_entrance")
            && (targ.classname != "building_teleporter_exit")) {

            if (!Activated(targ, attacker)) {
                if (targ.else_goal != 0) {
                    te = Findgoal(targ.else_goal);
                    if (te)
                        AttemptToActivate(te, attacker, targ);
                }
                return;
            }
        }
    }
    
    HitSound(targ, inflictor, attacker, damage);
    
    damage_attacker = attacker;

    if (teamplay & (TEAMPLAY_LESSSCOREHELP | TEAMPLAY_LESSPLAYERSHELP))
        damage = TeamEqualiseDamage(targ, attacker, damage);

    if ((targ.armorclass != 0) && (T_AttackType != 0)) {

        if ((targ.armorclass & AT_SAVESHOT) && (T_AttackType & TF_TD_SHOT)) {
            damage = floor(damage * 0.5);
        }
        if ((targ.armorclass & AT_SAVENAIL) && (T_AttackType & TF_TD_NAIL)) {
            damage = floor(damage * 0.5);
        }
        if ((targ.armorclass & AT_SAVEEXPLOSION) &&
            (T_AttackType & TF_TD_EXPLOSION)) {
            damage = floor(damage * 0.5);
        }
        if ((targ.armorclass & AT_SAVEELECTRICITY) &&
            (T_AttackType & TF_TD_ELECTRICITY)) {
            damage = floor(damage * 0.5);
        }
        if ((targ.armorclass & AT_SAVEFIRE) && (T_AttackType & TF_TD_FIRE)) {
            damage = floor(damage * 0.5);
        }
    }

    if (T_flags & TF_TD_IGNOREARMOUR) {

        take = damage;
        save = 0;

    } else {

        save = ceil(targ.armortype * damage);
        if ((attacker.classname == "player")
            && (targ.team_no > 0)
            && (targ.team_no == attacker.team_no)
            && (targ != attacker)
            && (T_flags & 2)) {

            if (T_AttackType & TF_TD_EXPLOSION) {

                if (teamplay & 1024) {
                    save = 0;
                } else if (teamplay & 512) {
                    save = save / 2;
                }

            } else if (teamplay & 256)
                save = 0;
            else if (teamplay & 128)
                save = save / 2;

        }
        if (save >= targ.armorvalue) {

            save = targ.armorvalue;
            targ.armortype = 0;
            targ.armorclass = 0;
            targ.items =
                targ.items -
                (targ.items & (IT_ARMOR1 | IT_ARMOR2 | IT_ARMOR3));

        }
        targ.armorvalue = targ.armorvalue - save;
        take = ceil(damage - save);

    }
    if (targ.flags & FL_CLIENT) {

        targ.dmg_take = targ.dmg_take + take;
        targ.dmg_save = targ.dmg_save + save;
        targ.dmg_inflictor = inflictor;

    }
    if ((inflictor != world) && (targ.movetype == MOVETYPE_WALK) &&
        !(targ.tfstate & 65536)) {

        if (deathmsg != DMSG_GREN_NAIL) {

            targ.immune_to_check = time + damage / 20;
            dir =
                targ.origin - (inflictor.absmin + inflictor.absmax) * 0.5;
            dir = normalize(dir);

            if (targ.playerclass == PC_HVYWEAP) {
                moment = damage / 4;
                if (damage <= 50)
                    moment = 0;
            } else
                moment = damage;

            if ((moment < 60)
                && (attacker.classname == "player")
                && (targ.classname == "player")
                && (attacker.netname != targ.netname)) {

                targ.velocity = targ.velocity + dir * moment * 11;

            } else
                targ.velocity = targ.velocity + dir * moment * 8;

            if ((rj > 1) && (attacker.classname == "player")
                && (targ.classname == "player")
                && (attacker.netname == targ.netname)) {

                targ.velocity = targ.velocity + dir * moment * rj;
            }
        }
    }
    if (targ.flags & FL_GODMODE)
        return;

    if (targ.invincible_finished >= time) {
        if (self.invincible_sound < time) {
            sound(targ, 3, "items/protect3.wav", 1, 1);
            self.invincible_sound = time + 2;
        }
        return;
    }
    if ((attacker.classname == "player")
        && ((targ.classname == "player")
            || (targ.classname == "building_sentrygun")
            || (targ.classname == "building_dispenser")
            || (targ.classname == "building_teleporter_entrance")
            || (targ.classname == "building_teleporter_exit"))) {

        if ((targ.team_no > 0) && (targ.team_no == attacker.team_no)
            && (targ != attacker) && (T_flags & TF_TD_NOTTEAM)) {

            if (T_AttackType & TF_TD_EXPLOSION) {

                if (teamplay & TEAMPLAY_NOEXPLOSIVE)
                    no_damage = TRUE;
                else if (teamplay & TEAMPLAY_HALFEXPLOSIVE)
                    take = take / 2;

            } else if (teamplay & TEAMPLAY_NODIRECT)
                no_damage = TRUE;
            else if (teamplay & TEAMPLAY_HALFDIRECT)
                take = take / 2;
        }
    }

    if (targ.playerclass == PC_SPY) {
        targ.attacked_by = attacker;
        targ.feignmsg = deathmsg;
    }

    if (T_flags & TF_TD_NOTSELF)
        if (targ == attacker)
            return;

    if (take < 1)
        take = 1;

    take = rint(take);

    if (no_damage == FALSE)
        targ.health = (targ.health - take);

    StatTracker.Damage(targ, inflictor, attacker, damage);

    if ((attacker.classname == "player")
        && ((targ.classname == "player")
            || (targ.classname == "building_sentrygun")
            || (targ.classname == "building_dispenser")
            || (targ.classname == "building_teleporter_entrance")
            || (targ.classname == "building_teleporter_exit"))) {

        if ((targ.team_no > 0) && (targ.team_no == attacker.team_no)
            && (targ != attacker) && (T_flags & 2)) {

            olddmsg = deathmsg;

            if (T_AttackType & TF_TD_EXPLOSION) {

                deathmsg = DMSG_TEAMKILL;
                if (teamplay & 16384)
                    TF_T_Damage(attacker, world, world, take, 1, 0);
                else if (teamplay & 8192)
                    TF_T_Damage(attacker, world, world, take / 2, 1, 0);

            } else {

                deathmsg = DMSG_TEAMKILL;
                if (teamplay & 4096)
                    TF_T_Damage(attacker, world, world, take, 1, 0);
                else if (teamplay & 2048)
                    TF_T_Damage(attacker, world, world, take / 2, 1, 0);
            }
            deathmsg = olddmsg;
        }
    }

    if (no_damage == TRUE)
        return;

    if (targ.armorvalue < 1) {
        targ.armorclass = 0;
        targ.armorvalue = 0;
    }

    if (targ.health <= 0) {
        if ((inflictor.classname == "detpack")
            && (inflictor.weaponmode == 1) && (inflictor.enemy == targ))
            deathmsg = DMSG_DETPACK_DIS;

        Killed(targ, attacker);
        return;
    }

    oldself = self;
    self = targ;

    if (self.th_pain) {
        self.th_pain(attacker, take);
        if (skill >= 3) {
            self.pain_finished = time + 5;
        }
    }
    self = oldself;
};

void (entity inflictor, entity attacker, float damage,
      entity ignore) T_RadiusDamage = {
    local float points;
    local entity head;
    local vector org;

    head = findradius(inflictor.origin, damage + 40);
    while (head) {
        if (head != ignore) {
            if (head.takedamage) {

                org = head.origin + (head.mins + head.maxs) * 0.5;
                points = 0.5 * vlen(inflictor.origin - org);
                if (points < 0)
                    points = 0;
                points = damage - points;
                if (head == attacker)
                    points = points * 0.75;

                if (points > 0) {
                    if (CanDamage(head, inflictor)) {
                        // shambler takes half damage from all explosions
                        if (head.classname == "monster_shambler")
                            T_Damage(head, inflictor, attacker,
                                     points * 0.5);
                        else
                            TF_T_Damage(head, inflictor, attacker, points,
                                        TF_TD_NOTTEAM, TF_TD_EXPLOSION);
                    }
                }
            }
        }
        head = head.chain;
    }
};

void (entity attacker, float damage) T_BeamDamage = {
    local float points;
    local entity head;

    head = findradius(attacker.origin, damage + 40);
    while (head) {
        if (head.takedamage) {

            points = 0.5 * vlen(attacker.origin - head.origin);
            if (points < 0)
                points = 0;
            points = damage - points;
            if (head == attacker)
                points = points * 0.5;
            if (points > 0)
                if (CanDamage(head, attacker))
                    T_Damage(head, attacker, attacker, points);
        }
        head = head.chain;
    }
};
